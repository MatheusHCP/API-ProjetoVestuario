// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositorio;

namespace Repositorio.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210923165936_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entidades.Imagens", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Produtoid")
                        .HasColumnType("int");

                    b.Property<string>("img_caminho")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Produtoid");

                    b.ToTable("imagens");
                });

            modelBuilder.Entity("Entidades.Produto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("prod_Descricao")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("prod_dataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("prod_preco")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("prod_statuspublicacao")
                        .HasColumnType("int");

                    b.Property<int>("prod_usuariocadastro")
                        .HasColumnType("int");

                    b.Property<int>("produtoCategoriaid")
                        .HasColumnType("int");

                    b.Property<int?>("produtoGeneroid")
                        .HasColumnType("int");

                    b.Property<int?>("produtoMarcaid")
                        .HasColumnType("int");

                    b.Property<int?>("produtoStatusid")
                        .HasColumnType("int");

                    b.Property<int?>("produtoTamanhoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("produtoCategoriaid");

                    b.HasIndex("produtoGeneroid");

                    b.HasIndex("produtoMarcaid");

                    b.HasIndex("produtoStatusid");

                    b.HasIndex("produtoTamanhoid");

                    b.ToTable("produtos");
                });

            modelBuilder.Entity("Entidades.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UsuarioTipoid")
                        .HasColumnType("int");

                    b.Property<string>("usu_cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("usu_dataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("usu_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usu_nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usu_senha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("usuarioEnderecoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UsuarioTipoid");

                    b.HasIndex("usuarioEnderecoid");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Entidades.produtoCategoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cat_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("Entidades.produtoGenero", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("genero_desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("generos");
                });

            modelBuilder.Entity("Entidades.produtoMarca", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("marca_desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("marcas");
                });

            modelBuilder.Entity("Entidades.produtoStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("status_desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("produtoStatus");
                });

            modelBuilder.Entity("Entidades.produtoTamanho", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("tamanho_desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tamanhos");
                });

            modelBuilder.Entity("Entidades.usuarioEndereco", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Usuarioid")
                        .HasColumnType("int");

                    b.Property<string>("end_CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("end_bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("end_cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("end_descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("end_endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("end_estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("end_referencia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("usuarioEndereco");
                });

            modelBuilder.Entity("Entidades.usuarioTipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("usuarioTipo_desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("usuarioTipo");
                });

            modelBuilder.Entity("Entidades.Imagens", b =>
                {
                    b.HasOne("Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("Produtoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Entidades.Produto", b =>
                {
                    b.HasOne("Entidades.produtoCategoria", "produtoCategoria")
                        .WithMany("produtos")
                        .HasForeignKey("produtoCategoriaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.produtoGenero", "produtoGenero")
                        .WithMany("produtos")
                        .HasForeignKey("produtoGeneroid");

                    b.HasOne("Entidades.produtoMarca", "produtoMarca")
                        .WithMany("produtos")
                        .HasForeignKey("produtoMarcaid");

                    b.HasOne("Entidades.produtoStatus", null)
                        .WithMany("Produto")
                        .HasForeignKey("produtoStatusid");

                    b.HasOne("Entidades.produtoTamanho", "produtoTamanho")
                        .WithMany("produtos")
                        .HasForeignKey("produtoTamanhoid");

                    b.Navigation("produtoCategoria");

                    b.Navigation("produtoGenero");

                    b.Navigation("produtoMarca");

                    b.Navigation("produtoTamanho");
                });

            modelBuilder.Entity("Entidades.Usuario", b =>
                {
                    b.HasOne("Entidades.usuarioTipo", "UsuarioTipo")
                        .WithMany("Usuarios")
                        .HasForeignKey("UsuarioTipoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.usuarioEndereco", null)
                        .WithMany("Usuario")
                        .HasForeignKey("usuarioEnderecoid");

                    b.Navigation("UsuarioTipo");
                });

            modelBuilder.Entity("Entidades.produtoCategoria", b =>
                {
                    b.Navigation("produtos");
                });

            modelBuilder.Entity("Entidades.produtoGenero", b =>
                {
                    b.Navigation("produtos");
                });

            modelBuilder.Entity("Entidades.produtoMarca", b =>
                {
                    b.Navigation("produtos");
                });

            modelBuilder.Entity("Entidades.produtoStatus", b =>
                {
                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Entidades.produtoTamanho", b =>
                {
                    b.Navigation("produtos");
                });

            modelBuilder.Entity("Entidades.usuarioEndereco", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entidades.usuarioTipo", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
